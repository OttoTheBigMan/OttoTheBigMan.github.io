import{S as X,i as Y,s as Z,k as c,q as f,a as i,l as e,m as u,r as b,h as s,c as r,n as T,D as $,b as o,F as t,B as V}from"./index-161b2921.js";function nn(K){let l,L,h,p,v,G,P,_,g,D,w,q,A,M,H,I,y,S,E,C,B,j,d,O=`<code class="language-js"><span class="token keyword">let</span> cardIsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> currentCard <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> closestCard <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">MoveCard</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>moving <span class="token operator">!=</span> cardIsMoving<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>moving<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">cardAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>moving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token function">GenerateListPositions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> listPositions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            listPositions<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">GetElementWidth</span><span class="token punctuation">(</span>listElements<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        currentCard <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        cardIsMoving <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        lists<span class="token punctuation">[</span>currentCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>currentCard<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> mouse<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
        lists<span class="token punctuation">[</span>currentCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>currentCard<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> mouse<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>

        closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetClosestIndexInArray</span><span class="token punctuation">(</span>mouse<span class="token punctuation">.</span>x<span class="token punctuation">,</span> listPositions<span class="token punctuation">)</span>
        <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"movingCard"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">GetTopValue</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">GetBottomValue</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span>
        closestCard<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetClosestIndexInArray</span><span class="token punctuation">(</span>mouse<span class="token punctuation">.</span>y<span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>moving<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//Snap it to the closest card position.</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>deleteCardHover<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">DeleteCard</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>moving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        cardIsMoving <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> el <span class="token operator">=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards <span class="token operator">=</span> lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cards
        lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>closestCard<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>el<span class="token punctuation">)</span>
        lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cards <span class="token operator">=</span> lists<span class="token punctuation">[</span>closestCard<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cards<span class="token punctuation">;</span>
        lists <span class="token operator">=</span> lists<span class="token punctuation">;</span>
        currentCard <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
    
<span class="token punctuation">&#125;</span></code>`,x,m,F;return{c(){l=c("h1"),L=f("Coola features:"),h=i(),p=c("ul"),v=c("li"),G=f("Man kan flytta listor"),P=i(),_=c("li"),g=f("Man kan flytta kort mellan listor"),D=i(),w=c("li"),q=f("Man kan ta bort kort och listor"),A=i(),M=c("li"),H=f("Man kan skapa nya kort av olika typer"),I=i(),y=c("p"),S=f("Dokumenterat den 17 / 4 - 2023"),E=i(),C=c("p"),B=f("Lite source code:"),j=i(),d=c("pre"),x=i(),m=c("img"),this.h()},l(n){l=e(n,"H1",{});var a=u(l);L=b(a,"Coola features:"),a.forEach(s),h=r(n),p=e(n,"UL",{});var k=u(p);v=e(k,"LI",{});var N=u(v);G=b(N,"Man kan flytta listor"),N.forEach(s),P=r(k),_=e(k,"LI",{});var R=u(_);g=b(R,"Man kan flytta kort mellan listor"),R.forEach(s),D=r(k),w=e(k,"LI",{});var U=u(w);q=b(U,"Man kan ta bort kort och listor"),U.forEach(s),A=r(k),M=e(k,"LI",{});var W=u(M);H=b(W,"Man kan skapa nya kort av olika typer"),W.forEach(s),k.forEach(s),I=r(n),y=e(n,"P",{});var z=u(y);S=b(z,"Dokumenterat den 17 / 4 - 2023"),z.forEach(s),E=r(n),C=e(n,"P",{});var J=u(C);B=b(J,"Lite source code:"),J.forEach(s),j=r(n),d=e(n,"PRE",{class:!0});var Q=u(d);Q.forEach(s),x=r(n),m=e(n,"IMG",{src:!0,alt:!0}),this.h()},h(){T(d,"class","language-js"),$(m.src,F="/not-trello-screenshot-1.png")||T(m,"src",F),T(m,"alt","waltuh")},m(n,a){o(n,l,a),t(l,L),o(n,h,a),o(n,p,a),t(p,v),t(v,G),t(p,P),t(p,_),t(_,g),t(p,D),t(p,w),t(w,q),t(p,A),t(p,M),t(M,H),o(n,I,a),o(n,y,a),t(y,S),o(n,E,a),o(n,C,a),t(C,B),o(n,j,a),o(n,d,a),d.innerHTML=O,o(n,x,a),o(n,m,a)},p:V,i:V,o:V,d(n){n&&s(l),n&&s(h),n&&s(p),n&&s(I),n&&s(y),n&&s(E),n&&s(C),n&&s(j),n&&s(d),n&&s(x),n&&s(m)}}}class an extends X{constructor(l){super(),Y(this,l,null,nn,Z,{})}}export{an as default};
